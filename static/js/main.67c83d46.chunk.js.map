{"version":3,"sources":["components/Header.js","components/Card.js","contexts/CurrentUserContext.js","components/Main.js","components/PopupWithForm.js","utils/utils.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/EditVerificationPopup.js","components/ImagePopup.js","components/Footer.js","utils/Api.js","components/App.js","serviceWorker.js","index.js","images/mesto-logo.svg"],"names":["Header","props","className","src","logo","alt","Card","React","useState","error","setError","isOwn","card","owner","_id","currentUser","cardDeleteButtonClassName","isLiked","likes","some","item","cardLikeButtonClassName","cardLikeButtonHidden","errorImageName","name","errorCountLike","link","onClick","e","onCardClick","onError","target","setAttribute","type","onCardLike","length","onTrashClick","parentElement","CurrentUserContext","createContext","Main","useContext","onEditAvatar","avatar","onEditProfile","about","onAddPlace","cards","map","key","PopupWithForm","isOpen","overlayClick","method","action","onSubmit","noValidate","title","children","isButtonDisable","undefined","disabled","buttonText","aria-label","onClose","formConfig","EditProfilePopup","setName","description","setDescription","formErrors","author","job","authorValid","jobValid","formValid","valid","setValid","validateField","input","inputName","inputValidationErrors","validity","validationMessage","useEffect","handleButtonText","isText","overlay","preventDefault","onChangeText","onUpdateUser","id","placeholder","defaultValue","minLength","maxLength","pattern","required","onChange","value","EditAvatarPopup","inputRef","useRef","formError","form","isValid","setIsValid","onUpdateAvatar","current","ref","AddPlacePopup","inputLink","nameValid","linkValid","handleInput","EditVerificationPopup","onCardDelete","cardId","ImagePopup","Footer","api","baseUrl","this","_baseUrl","url","params","headers","authorization","fetch","then","res","ok","json","Promise","reject","status","_fetch","data","body","JSON","stringify","isState","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","state","elem","isEditVerificationPopupOpen","setIsEditVerificationPopupOpen","selectedCard","setSelectedCard","showImage","setShowImage","text","setText","setCurrentUser","setCards","changeText","closeAllPopups","classList","contains","getUserInterface","catch","err","console","log","getInitialCards","array","window","addEventListener","Provider","changeLikeCardStatus","newCard","newCards","c","sendUserInfo","newData","finally","sendPlaceCard","reset","changeAvatar","deleteCard","remove","filter","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.67c83d46.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n\n  return (\n    <>\n      <header className=\"header\">\n          <img className=\"header__logo\" src={props.logo} alt=\"Логотип-Место\" />\n      </header>\n    </>\n  )\n}\n\nexport default Header\n","import React from 'react';\n\nfunction Card(props) {\n\n  const [error, setError] = React.useState(false); //стейт для проверки правильности ссылки\n\n  function errorLoadImage(e) {\n    e.target.setAttribute('src', 'https://image.freepik.com/free-vector/404_115790-50.jpg'); //усди ссылка неверна, загрузит стандартную картинку\n    setError(true); //поменяет стейт\n  }\n\n  function handleDeleteClick(e) {\n    props.onTrashClick(props.card, e.target.parentElement);\n  }\n\n  function handleClick(e) {\n    !error && props.onCardClick(props.card); //если нет ошибки в картинке, то можно по ней кликать\n  }\n\n  function handleLikeClick() {\n    props.onCardLike(props.card);\n  }\n\n  const isOwn = props.card.owner._id === props.currentUser._id; // Определяем, являемся ли мы владельцем текущей карточки\n  const cardDeleteButtonClassName = ( // Создаём переменную, которую после зададим в `className` для кнопки удаления\n    `element__trash ${isOwn ? '' : 'element__trash_hidden'}`\n  );\n\n\n  const isLiked = props.card.likes.some(item => item._id === props.currentUser._id); // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n  const cardLikeButtonClassName = (// Создаём переменную, которую после зададим в `className` для кнопки лайка\n    `element__button ${isLiked ? 'element__button_like-active' : ''}`\n  );\n\n  const cardLikeButtonHidden = ( //если есть ошибка то скрываем кнопку сердечко\n    `${error && 'element__button_hidden'}`\n  );\n\n  const errorImageName = ( //если нет ошибки, то показываем текст, иначе пишем свой\n    `${!error ? `${props.card.name}` : 'Упс, ошибка...'}`\n  );\n\n  const errorCountLike = ( //если есть ошибка, то скрываем кол-во лайков\n    `element__count ${error && 'element__count_hidden'}`\n  );\n\n  return (\n    <>\n      <div className=\"element\">\n        <img className=\"element__image\" alt=\"Изображение\" src={props.card.link} onClick={handleClick} onError={errorLoadImage} /> {/*при клике вызывает ф-цию по смене стейта и передает данные о карточке в App*/}\n        <div className=\"element__places\">\n          <h2 className=\"element__place\">{errorImageName}</h2>\n          <div className=\"element__likes\">\n            <button className={`${cardLikeButtonClassName} ${cardLikeButtonHidden}`} type=\"button\" onClick={handleLikeClick}></button>\n            <span className={errorCountLike}> {props.card.likes.length > 0 ? `${props.card.likes.length}` : 0} </span>\n          </div>\n        </div>\n        <button className={cardDeleteButtonClassName} type=\"button\" onClick={handleDeleteClick}></button>\n      </div>\n    </>\n  )\n}\n\nexport default Card;\n","import React from 'react';\n\nexport const CurrentUserContext = React.createContext(); //новый объект контекста\n","import React from 'react';\nimport Card from './Card';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\nfunction Main(props) {\n\n  const currentUser = React.useContext(CurrentUserContext); //получаем объект о пользвателе из контекста\n\n  return (\n    <>\n      <main className=\"content\">\n        <section className=\"profile\">\n          <div className=\"profile__cover\">\n            <div className=\"profile__information\">\n              <figure className=\"profile__background\" onClick={props.onEditAvatar}></figure> {/*при клике на аву меняем стейт на true и передем в компонент App*/}\n              <img className=\"profile__avatar\" src={currentUser.avatar} alt={currentUser.name} />\n            </div>\n            <div className=\"profile__info\">\n              <div className=\"profile__reg\">\n                <h1 className=\"profile__author\">{currentUser.name}</h1>\n                <button className=\"profile__button-edit\" type=\"button\" onClick={props.onEditProfile}></button> {/*при клике на редактор инфы меняем стейт на true и передем в компонент App*/}\n              </div>\n              <p className=\"profile__specialty\">{currentUser.about}</p>\n            </div>\n          </div>\n          <button className=\"profile__button-add\" type=\"button\" onClick={props.onAddPlace}></button> {/*при клике на + меняем стейт на true и передем в компонент App*/}\n        </section>\n\n        <section className=\"elements\"> {/*передаем в Card информацию о каждой карточке, приcваиваем каждой карточке key и передаем ф-цию по смене флага при нажатии на картинку*/}\n          {props.cards.map((item) => {\n            return (\n              <Card card={item}\n                key={item._id}\n                onCardClick={props.onCardClick}\n                currentUser={currentUser}\n                onCardLike={props.onCardLike}\n                onTrashClick={props.onTrashClick} />\n            );\n          })}\n        </section>\n      </main>\n    </>\n  )\n}\n\nexport default Main\n","import React from 'react';\n\nfunction PopupWithForm(props) {\n  // console.log(props.isButtonDisable)\n\n  return (\n    <>\n      <section className={`popup popup__${props.name} ${props.isOpen && 'popup_opened'}`} onClick={props.overlayClick}>\n        <form className={`popup-container popup-container__${props.name}`} name=\"form\" method=\"POST\" action=\"#\" onSubmit={props.onSubmit} noValidate>\n          <h2 className=\"popup-container__text\">{props.title}</h2>\n          <fieldset className=\"popup-container__info\">\n            {props.children}\n            <button\n              className={`popup-container__button-add ${!props.isButtonDisable && props.isButtonDisable !== undefined ? 'popup-container__button-add_error' : ''}`}\n              type=\"submit\"\n              disabled={!props.isButtonDisable && props.isButtonDisable !== undefined}>\n              {props.buttonText}\n            </button>\n          </fieldset>\n          <button className=\"popup-container__button-reset\" type=\"reset\" aria-label=\"Close\" onClick={props.onClose}></button>\n        </form>\n      </section>\n    </>\n  )\n}\n\nexport default PopupWithForm;\n","export const baseUrl = 'https://mesto.nomoreparties.co/v1/cohort-12'; //базовый URL\n\nexport const formConfig = {\n  inputSelector: '.popup-container__infoform', //поле формы\n  submitButtonSelector: '.popup-container__button-add', //кнопка добавить/сохранить/создать\n  inactiveButtonClass: 'popup-container__button-add_error', //стиль неактивной кнопки\n  inputErrorClass: 'popup-container__infoform_type_error', //стиль красного подчеркивания поля\n  errorClass: 'popup-container__input-error_active' //появление ошибки валидации\n};\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport { formConfig } from '../utils/utils';\n\nfunction EditProfilePopup(props) {\n\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //реализация управляемого компонента\n  const [name, setName] = React.useState(''); //стетй с именем\n  const [description, setDescription] = React.useState(''); //стейт с деятельностью\n  const [valid, setValid] = React.useState({ //стейт для валидации\n    formErrors: { author: '', job: '' }, //объект с текстом ошибок\n    authorValid: true, //валидность поля с автором\n    jobValid: true, //валидность с полем деятельности\n    formValid: true, //валидность всей формы\n  });\n\n  React.useEffect(() => { //меняем стейты в зависимости от контекста currentUser\n    setName(currentUser.name);\n    setDescription(currentUser.about);\n  }, [currentUser]);\n\n  function handleChangeAuthor(e) { //меняем стейт при каждом изменении в поле инпута\n    setName(e.target.value);\n    validateField(e.target, e.target.name); //вызывем функцию по валидности (передаем инпут и его имя)\n  }\n\n  function handleChangeAbout(e) {\n    setDescription(e.target.value);\n    validateField(e.target, e.target.name);\n  }\n\n  function validateField(input, inputName) {\n    let inputValidationErrors = valid.formErrors; //все переменные берут первоначальные значения из стейта\n    let authorValid = valid.authorValid;\n    let jobValid = valid.jobValid;\n    let formValid = valid.formValid;\n\n    switch (inputName) {\n      case 'author':\n        authorValid = input.validity.valid;\n        inputValidationErrors.author = authorValid ? '' : input.validationMessage;\n        break;\n      case 'job':\n        jobValid = input.validity.valid;\n        inputValidationErrors.job = jobValid ? '' : input.validationMessage;\n        break;\n      default:\n        break;\n    }\n\n    formValid = authorValid && jobValid;\n\n    setValid({\n      formErrors: inputValidationErrors,\n      authorValid: authorValid,\n      jobValid: jobValid,\n      formValid: formValid,\n    })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.onChangeText();\n    props.onUpdateUser({\n      name: name,\n      about: description\n    });\n  }\n\n\n  function resetAll() {\n    setName(currentUser.name);\n    setDescription(currentUser.about);\n    setValid({\n      formErrors: { author: '', job: '' },\n      authorValid: true,\n      jobValid: true,\n      formValid: true,\n    })\n  }\n\n  function resetInput() { //сбрасываем введенные значания инпутов при клике на крестик\n    props.onClose();\n    resetAll()\n  }\n\n  const handleButtonText = (\n    `${props.isText ? 'Сохранение...' : 'Сохранить'}`\n  )\n\n  function overlayClick(e) {\n    props.overlay(e.target);\n  }\n\n  return (\n    <PopupWithForm\n      overlayClick={overlayClick}\n      onSubmit={handleSubmit}\n      title=\"Редактировать профиль\"\n      name=\"edit-form\"\n      buttonText={handleButtonText}\n      isButtonDisable={valid.formValid}\n      isOpen={props.isOpen}\n      onClose={resetInput}\n      children={\n        <>\n          <input className={`popup-container__infoform popup-container__infoform_author ${!valid.authorValid && formConfig.inputErrorClass}`}\n            id=\"author\"\n            name=\"author\"\n            type=\"text\"\n            placeholder=\"Автор\"\n            defaultValue={name}\n            minLength=\"2\" maxLength=\"40\"\n            pattern=\"[A-Za-zА-ЯЁа-яё -]{1,}\" required\n            onChange={handleChangeAuthor} />\n          <span className={`popup-container__input-error ${!valid.authorValid && formConfig.errorClass}`} id=\"author-input-error\">{valid.formErrors.author}</span>\n          <input className={`popup-container__infoform popup-container__infoform_author ${!valid.jobValid && formConfig.inputErrorClass}`}\n            id=\"job\"\n            name=\"job\"\n            type=\"text\"\n            defaultValue={description}\n            placeholder=\"О себе\"\n            minLength=\"2\" maxLength=\"200\" required\n            onChange={handleChangeAbout} />\n          <span className={`popup-container__input-error ${!valid.jobValid && formConfig.errorClass}`} id=\"job-input-error\">{valid.formErrors.job}</span>\n        </>\n      }\n    />\n  )\n}\n\nexport default EditProfilePopup;\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport { formConfig } from '../utils/utils';\n\nfunction EditAvatarPopup(props) {\n\n  const inputRef = React.useRef();\n\n  const [isValid, setIsValid] = React.useState({\n    formError: '',\n    avatar: false,\n    form: false\n  });\n\n  function handleInputError(e) {\n    validateField(e.target, e.target.name);\n  }\n\n  function validateField(input, name) {\n    let avatar = isValid.avatar;\n    let form = isValid.form;\n    let formError = isValid.formError;\n\n    avatar = input.validity.valid;\n    formError = avatar ? '' : input.validationMessage;\n    form = avatar;\n\n    setIsValid({\n      formError: formError,\n      avatar: avatar,\n      form: form\n    })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.onChangeText();\n    props.onUpdateAvatar(e.target, {\n      avatar: inputRef.current.value,\n    });\n  }\n\n  const handleButtonText = (\n    `${props.isText ? 'Сохранение...' : 'Сохранить'}`\n  );\n\n  function overlayClick(e) {\n    props.overlay(e.target);\n  }\n\n  function resetInput() { //сбрасываем введенные значания инпутов при клике на крестик\n    props.onClose();\n  }\n\n  return (\n    <PopupWithForm\n      isButtonDisable={isValid.form}\n      overlayClick={overlayClick}\n      onSubmit={handleSubmit}\n      title=\"Обновить аватар\"\n      defaultValue=\"\"\n      name=\"avatar\"\n      buttonText={handleButtonText}\n      isOpen={props.isOpen}\n      onClose={resetInput}\n      children={\n        <>\n          <input className={`popup-container__infoform popup-container__infoform_avatar-link ${!isValid.avatar && formConfig.inputErrorClass}`}\n            id=\"avatar-input\"\n            ref={inputRef}\n            onChange={handleInputError}\n            name=\"avatar\"\n            type=\"url\"\n            placeholder=\"Введите ссылку\"\n            required />\n          <span className=\"popup-container__input-error\">{isValid.formError}</span>\n        </>\n      }\n    />\n  )\n}\n\nexport default EditAvatarPopup;\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport { formConfig } from '../utils/utils';\n\nfunction AddPlacePopup(props) {\n\n  const inputName = React.useRef(); //инпут с названием карточки\n  const inputLink = React.useRef(); //иипут с ссылкой\n  const [valid, setValid] = React.useState({ //стейт для валидации\n    formErrors: { name: '', link: '' }, //объект с текстом ошибок\n    nameValid: false, //валидность поля с автором\n    linkValid: false, //валидность с полем деятельности\n    formValid: false //валидность всей формы\n  });\n\n  function handleInput(e) {\n    if (e.target === inputName.current) {\n      validateField(inputName.current, inputName.current.name)\n    } else {\n      validateField(inputLink.current, inputLink.current.name)\n    }\n  }\n\n  function validateField(input, inputName) {\n    let inputValidationErrors = valid.formErrors; //все переменные берут первоначальные значения из стейта\n    let nameValid = valid.nameValid;\n    let linkValid = valid.linkValid;\n    let formValid = valid.formValid;\n\n    switch (inputName) {\n      case 'name':\n        nameValid = input.validity.valid;\n        inputValidationErrors.name = nameValid ? '' : input.validationMessage;\n        break;\n      case 'link':\n        linkValid = input.validity.valid;\n        inputValidationErrors.link = linkValid ? '' : input.validationMessage;\n        break;\n      default:\n        break;\n    }\n\n    formValid = nameValid && linkValid;\n\n    setValid({\n      formErrors: inputValidationErrors,\n      nameValid: nameValid,\n      linkValid: linkValid,\n      formValid: formValid,\n    })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.onChangeText(); //меняем стейт текста на true\n    props.onAddPlace(e.target, {\n      name: inputName.current.value, //передаем хначания инпутов\n      link: inputLink.current.value  //как объект в апи запрос\n    })\n    setValid({ //сбрасывам значения валидации (ума не приложу как ее сделать после апи, а не во врЕмя...)\n      formErrors: { name: '', link: '' },\n      nameValid: false,\n      linkValid: false,\n      formValid: false\n    })\n  }\n\n  const handleButtonText = (\n    `${props.isText ? 'Сохранение...' : 'Создать'}` //если стейт текста true ...\n  );\n\n  function resetInput() { //сбрасываем введенные значания инпутов при клике на крестик\n    props.onClose();\n    setValid({\n      formErrors: { name: '', link: '' },\n      nameValid: false,\n      linkValid: false,\n      formValid: false\n    })\n  }\n\n  function overlayClick(e) {\n    props.overlay(e.target);\n  }\n\n  return (\n    <PopupWithForm\n      isButtonDisable={valid.formValid}\n      overlayClick={overlayClick}\n      onSubmit={handleSubmit}\n      title=\"Новое место\"\n      name=\"add-place\"\n      buttonText={handleButtonText}\n      isOpen={props.isOpen}\n      onClose={resetInput}\n      children={\n        <>\n          <input\n            className={`popup-container__infoform popup-container__infoform_place-name ${!valid.nameValid && formConfig.inputErrorClass}`}\n            id=\"place-input\"\n            defaultValue=\"\"\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Название\"\n            minLength=\"1\" maxLength=\"30\"\n            ref={inputName} //получаем доступ к элементу\n            onChange={handleInput}\n            required\n          />\n          <span className={`popup-container__input-error ${!valid.nameValid && formConfig.errorClass}`} id=\"place-input-error\">{valid.formErrors.name}</span>\n          <input\n            className={`popup-container__infoform popup-container__infoform_place-link ${!valid.linkValid && formConfig.inputErrorClass}`}\n            id=\"link-input\"\n            defaultValue=\"\"\n            name=\"link\"\n            type=\"url\"\n            placeholder=\"Ссылка на картинку\"\n            ref={inputLink}\n            onChange={handleInput}\n            required\n          />\n          <span className={`popup-container__input-error ${!valid.linkValid && formConfig.errorClass}`}>{valid.formErrors.link}</span>\n        </>\n      }\n    />\n  )\n}\n\nexport default AddPlacePopup;\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditVerificationPopup(props) {\n\n  function handleDeleteClick(e) {\n    e.preventDefault();\n    props.onChangeText();\n    props.onCardDelete(props.cardId);\n  }\n\n  const handleButtonText = (\n    `${props.isText ? 'Сохранение...' : 'Да'}`\n  );\n\n  function overlayClick(e) {\n    props.overlay(e.target);\n  }\n\n  return (\n    <PopupWithForm\n      overlayClick={overlayClick}\n      onSubmit={handleDeleteClick}\n      isOpen={props.isOpen}\n      onClose={props.onClose}\n      title=\"Вы уверены?\"\n      name=\"verification\"\n      buttonText={handleButtonText}\n      isText={props.isText}\n    />\n  )\n}\n\nexport default EditVerificationPopup;\n","import React from 'react';\n\nfunction ImagePopup(props) {\n\n  function overlayClick(e) {\n    props.overlay(e.target);\n  }\n\n  return (\n    <>\n      <section className={`popup popup__show-image ${props.isOpen && 'popup_opened'}`} onClick={overlayClick}>\n        <figure className=\"popup-image\">\n          <img className=\"popup-image__picture\" src={props.card.link} alt=\"Изображение места\"/>\n          <figcaption className=\"popup-image__caption\">{props.card.name}</figcaption>\n          <button className=\"popup-container__button-reset popup-container__button-reset_image\" type=\"reset\" aria-label=\"Close\" onClick={props.onClose}></button>\n        </figure>\n      </section>\n    </>\n  )\n}\n\nexport default ImagePopup;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <>\n      <footer className=\"footer\">\n          <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\n      </footer>\n    </>\n  )\n}\n\nexport default Footer\n","import { baseUrl } from './utils';\n//на данный момент бОльшая часть запросов не функционирует, \"работают\" только  GET-запросы\nclass Api {\n  constructor({ baseUrl }) {\n    this._baseUrl = baseUrl;\n  }\n  //приватный фетч запрос\n  _fetch(url, params) {\n    params.headers = {\n      authorization: 'f137b98e-3f11-4f62-a4b2-d83c32e82337',\n      'Content-Type': 'application/json'\n    };\n    return fetch(this._baseUrl + url, params)\n      .then((res) => {\n        if (!res.ok) {\n          return Promise.reject(res.status);\n        } else {\n          return res.json();\n        }\n      })\n  }\n  //получаем карточки с сервера\n  getInitialCards(url) {\n    return this._fetch(url, {\n      method: 'GET'\n    })\n  }\n  //получает имя и деятельность автора с сервера\n  getUserInterface(url) {\n    return this._fetch(url, {\n      method: 'GET'\n    })\n  }\n  //отправить инфооацию об аторе на сервер и обновить ее\n  sendUserInfo(url, data) {\n    return this._fetch(url, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: `${data.name}`,\n        about: `${data.about}`\n      })\n    })\n  }\n  //отправить карточку на сервер\n  sendPlaceCard(url, data) {\n    return this._fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        name: `${data.name}`,\n        link: `${data.link}`\n      })\n    })\n  }\n\n  changeLikeCardStatus(url, isState) {\n    if (!isState) {\n      return this._fetch(url, {\n        method: 'PUT'\n      })\n    } else {\n      return this._fetch(url, {\n        method: 'DELETE'\n      })\n    }\n  }\n\n  //удалить карточку с сервера\n  deleteCard(url) {\n    return this._fetch(url, {\n      method: 'DELETE'\n    })\n  }\n\n  //поменять аватар\n  changeAvatar(url, data) {\n    return this._fetch(url, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        avatar: `${data.avatar}`\n      })\n    })\n  }\n}\n\nexport const api = new Api({ baseUrl });\n","import React from 'react';\nimport logo from '../images/mesto-logo.svg';\nimport Header from './Header';\nimport Main from './Main';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport EditVerificationPopup from './EditVerificationPopup';\nimport ImagePopup from './ImagePopup';\nimport Footer from './Footer';\nimport { api } from '../utils/Api';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\nfunction App() {\n\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false); //стейт профиль\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false); //добавление нового места\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false); //смена аватара\n  const [isEditVerificationPopupOpen, setIsEditVerificationPopupOpen] = React.useState({ state: false, cardId: '', elem: {} }); //подтверждение удаления\n  const [selectedCard, setSelectedCard] = React.useState(false); //открытие картинки\n  const [showImage, setShowImage] = React.useState({}); //данные картинки\n  const [text, setText] = React.useState(false); //стейт для изменения текта при загрузке сервера\n\n  const [currentUser, setCurrentUser] = React.useState({}); //получаем информацию об авторе\n  const [cards, setCards] = React.useState([]);//создает стейт из пустого массива (в нем будет хранится массив карточек)\n\n  React.useEffect(() => {\n    api.getUserInterface('/users/me')\n      .then((data) => {\n        setCurrentUser(data);\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      });\n    api.getInitialCards('/cards') //отправляем запрос на сервер и получаем массив карточек\n      .then((array) => {\n        setCards(array); //меняем стейт cards\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      });\n  }, []);\n\n  function changeText() { //смена текта при апи запросе\n    setText(true);\n  }\n  //функция меняет хначения при клике на картинку и передает showImage данные об этой картинке (получает из компонента ImagePopup)\n  function handleCardClick(data) {\n    setSelectedCard(true);\n    setShowImage(data);\n  }\n  //попап сменить аватарку\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  };\n  //попап редактировать профиль\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  };\n  //попап загрузить новое место\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  };\n  // подтверждение удаления (принимает объект карточки и форму)\n  function handleVerificationClick(data, e) {\n    setIsEditVerificationPopupOpen({ state: true, cardId: `${data._id}`, elem: e });\n  };\n  //закрывает все попапы на крестик\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(false);\n    setIsEditVerificationPopupOpen({ state: false, cardId: '', elem: {} });\n  }\n\n  function overlayClick(e) { //оверлей по клику (принимает попап)\n    if (e.classList.contains('popup')) {\n      closeAllPopups();\n    }\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        closeAllPopups();\n      }\n    });\n  }, []);\n\n  // function escClick(e) { //закрытие попара по esc (не закрывется попап с аватар и картинкой)\n  //   if (e.key === 'Escape') {\n  //     closeAllPopups();\n  //   }\n  // }\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(item => item._id === currentUser._id);\n\n    api.changeLikeCardStatus(`/cards/likes/${card._id}`, isLiked)\n      .then((newCard) => {\n        const newCards = cards.map((c) => c._id === card._id ? newCard : c);// Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n        //проверяет если id предыдущей карточки равен id полученной при PUT-запросе, то создавай новую карточку из запроса иначе оставляй старую\n        setCards(newCards);// Обновляем стейт\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      });\n  }\n  // запрос по удалению карточки с сервера (принимает Id карточки)\n  function handleCardDelete(cardId) {\n    api.deleteCard(`/cards/${cardId}`)\n      .then((data) => {\n        isEditVerificationPopupOpen.elem.remove(); //удаляет карточку\n        const newCards = cards.filter((c) => c._id !== data._id);\n        setCards(newCards); //меняет стейт с карточками\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      })\n      .finally(() => {\n        setText(false); //меняет текст кнопки сабмита\n      })\n  }\n\n  // обновляет информацию о пользователе\n  function handleUpdateUser(data) {\n    api.sendUserInfo('/users/me', data)\n      .then((newData) => {\n        setCurrentUser(newData); //обновляет контекст currentUser\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      })\n      .finally(() => {\n        setText(false); //меняет текст кнопки сабмита\n      })\n  }\n  // обновляет аватар пользователя (принимает форму и объект с данными (имя и ссылка))\n  function handleUpdateAvatar(e, data) {\n    api.changeAvatar('/users/me/avatar', data)\n      .then((newData) => {\n        setCurrentUser(newData); //обновляет контекст currentUser\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      })\n      .finally(() => {\n        e.reset(); //сбрасывает значения инпутов\n        setText(false); //меняет текст кнопки сабмита\n      });\n  }\n  // добавляет новую карточку (принимает форму и объект(имя и ссылка))\n  function handleAddPlace(e, data) {\n    api.sendPlaceCard('/cards', data)\n      .then((newCard) => {\n        setCards([...cards, newCard]); //добавляет в имеющийся массив карточек новую карточку\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      })\n      .finally(() => {\n        e.reset(); //сбрасывает значения инпутов\n        setText(false); //меняет текст кнопки сабмита\n      });\n  }\n\n  return (\n    <div className=\"page\">\n      <CurrentUserContext.Provider value={currentUser}>\n        <Header logo={logo} />\n        <Main\n          onEditProfile={handleEditProfileClick} //передает ф-цию по клике на редактирование профиля\n          onAddPlace={handleAddPlaceClick} // передает ф-цию по клике на кнопку добавления нового места\n          onEditAvatar={handleEditAvatarClick} //ф-ция по клику на смену аватара\n          onCardClick={handleCardClick} //ф-ция по клике на картинку\n          onTrashClick={handleVerificationClick}\n          cards={cards}\n          onCardLike={handleCardLike}\n        />\n\n        <EditProfilePopup\n          overlay={overlayClick}\n          isText={text}\n          onChangeText={changeText}\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser}\n        />\n\n        <AddPlacePopup\n          overlay={overlayClick}\n          isText={text}\n          onChangeText={changeText}\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlace}\n        />\n\n        <EditAvatarPopup\n          overlay={overlayClick}\n          isText={text}\n          onChangeText={changeText}\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar}\n        />\n\n        <EditVerificationPopup\n          overlay={overlayClick}\n          isText={text}\n          onChangeText={changeText}\n          cardId={isEditVerificationPopupOpen.cardId}\n          isOpen={isEditVerificationPopupOpen.state}\n          onClose={closeAllPopups}\n          onCardDelete={handleCardDelete}\n        />\n\n        <ImagePopup\n          overlay={overlayClick}\n          card={showImage}\n          isOpen={selectedCard}\n          onClose={closeAllPopups}\n        />\n        <Footer />\n      </CurrentUserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mesto-logo.c6f11019.svg\";"],"sourceRoot":""}