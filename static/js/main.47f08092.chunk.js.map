{"version":3,"sources":["components/Header.js","utils/Api.js","utils/utils.js","components/Card.js","components/Main.js","components/PopupWithForm.js","components/ImagePopup.js","components/Footer.js","components/App.js","serviceWorker.js","index.js","images/mesto-logo.svg"],"names":["Header","props","className","src","logo","alt","api","baseUrl","this","_baseUrl","url","params","headers","authorization","fetch","then","res","ok","json","Promise","reject","status","_fetch","method","data","body","JSON","stringify","name","author","about","job","link","avatar","Card","card","onClick","onCardClick","type","likes","length","Main","React","useState","userInterface","setUserInterface","cards","setCards","useEffect","getUserInterface","catch","err","console","log","getInitialCards","array","onEditAvatar","onEditProfile","onAddPlace","map","item","index","key","PopupWithForm","isOpen","action","noValidate","title","children","buttonText","aria-label","onClose","ImagePopup","Footer","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","showImage","setShowImage","closeAllPopups","id","defaultValue","placeholder","minLength","maxLength","pattern","required","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.47f08092.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n\n  return (\n    <>\n      <header className=\"header\">\n          <img className=\"header__logo\" src={props.logo} alt=\"Логотип-Место\" />\n      </header>\n    </>\n  )\n}\n\nexport default Header\n","import React from 'react';\nimport { baseUrl } from './utils';\n//на данный момент бОльшая часть запросов не функционирует, \"работают\" только  GET-запросы\nclass Api {\n  constructor({baseUrl}) {\n    this._baseUrl = baseUrl;\n  }\n//приватный фетч запрос\n  _fetch(url, params) {\n      params.headers = {\n        authorization: 'f137b98e-3f11-4f62-a4b2-d83c32e82337',\n        'Content-Type': 'application/json'\n      };\n    return fetch(this._baseUrl + url, params)\n      .then((res) => {\n        if(!res.ok) {\n          return Promise.reject(res.status);\n        } else {\n          return res.json();\n        }\n      })\n  }\n  //получаем карточки с сервера\n  getInitialCards(url) {\n    return this._fetch(url, {\n      method: 'GET'\n    })\n  }\n  //получает имя и деятельность автора с сервера\n  getUserInterface(url) {\n    return this._fetch(url, {\n      method: 'GET'\n    })\n  }\n  //отправить инфооацию об аторе на сервер и обновить ее\n  sendUserInfo(url, data) {\n    return this._fetch(url, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: `${data.author}`,\n        about: `${data.job}`\n      })\n    })\n  }\n  //отправить карточку на сервер\n  sendPlaceCard(url, data) {\n    return this._fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        name: `${data.name}`,\n        link: `${data.link}`\n      })\n    })\n  }\n  //удалить карточку с сервера\n  deleteCard(url) {\n    return this._fetch(url, {\n      method: 'DELETE'\n    })\n  }\n //поставить лайк и обновить массив лайков\n  putLike(url) {\n    return this._fetch(url, {\n      method: 'PUT'\n      })\n  }\n  //поменять аватар\n  changeAvatar(url, data) {\n    return this._fetch(url, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        avatar: `${data.avatar}`\n      })\n    })\n  }\n}\n\nexport const api = new Api({baseUrl});\n","import React from 'react';\n\n// const content = document.querySelector('.content');\nexport const baseUrl = 'https://mesto.nomoreparties.co/v1/cohort-12'; //базовый URL\n\n// export const editButton = content.querySelector('.profile__button-edit'); //кнопка редактирования\n\n// export const popupEditForm = content.querySelector('.popup__edit-form'); //попап-редактировать профиль\n// export const popupAddPlace = content.querySelector('.popup__add-place'); //попап-добавить новое место\n// export const popupShowImage = content.querySelector('.popup__show-image'); //попап-открыть картинку\n// export const popupVerification = content.querySelector('.popup__verification'); //попап подтвердить удаление\n// export const popupAvatar = content.querySelector('.popup__avatar'); //попап подтвердить удаление\n\n// export const addButton = content.querySelector('.profile__button-add'); //кнопка добавть новое место\n// export const avatar = content.querySelector('.profile__information');\n\n// export const elements = '.elements'; //секция с карточками\n\n// export const nameInput = document.forms.form.author; //content.querySelector('.popup-container__infoform_author'); //форма с именем автора\n// export const jobInput = document.forms.form.job; //content.querySelector('.popup-container__infoform_aboutyourself'); //форма с деятельностью автора\n\n// export const formConfig = {\n//   inputSelector: '.popup-container__infoform', //поле формы\n//   submitButtonSelector: '.popup-container__button-add', //кнопка добавить/сохранить/создать\n//   inactiveButtonClass: 'popup-container__button-add_error', //стиль неактивной кнопки\n//   inputErrorClass: 'popup-container__infoform_type_error', //стиль красного подчеркивания поля\n//   errorClass: 'popup-container__input-error_active' //появление ошибки валидации\n// };\n\n// export const formAuthor = document.querySelector('.popup-container__author');\n// export const formPlace = document.querySelector('.popup-container__place');\n// export const formAvatar = document.querySelector('.popup-container__avatar');\n","import React from 'react';\n\nfunction Card(props) {\n\n  function handleClick() {\n    props.onCardClick(props.card);\n  }\n\n  return (\n    <>\n      <div className=\"element\">\n        <img className=\"element__image\" alt=\"Изображение\" src={props.card.link} onClick={handleClick} /> {/*при клике вызывает ф-цию по смене стейта и передает данные о карточке в App*/}\n        <div className=\"element__places\">\n          <h2 className=\"element__place\">{props.card.name}</h2>\n          <div className=\"element__likes\">\n            <button className=\"element__button\" type=\"button\"></button>\n            <span className=\"element__count\"> {props.card.likes.length > 0 ? `${props.card.likes.length}` : 0} </span>\n          </div>\n        </div>\n        <button className=\"element__trash\" type=\"button\"></button>\n      </div>\n    </>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport { api } from '../utils/Api';\nimport Card from './Card';\n\nfunction Main(props) {\n\n  const [userInterface, setUserInterface] = React.useState({}); //создаем стейт из информации об авторе (начальные значения - пустой объект)\n  const [cards, setCards] = React.useState([]);//создает стейт из пустого массива (в нем будет хранится массив карточек)\n\n  React.useEffect(() => {\n    api.getUserInterface('/users/me') //отправляем запрос на сервер и получаем инфу об авторе\n      .then((data) => {\n        setUserInterface(data); //меняем стейт userInterface\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      });\n    api.getInitialCards('/cards') //отправляем запрос на сервер и получаем массив карточек\n      .then((array) => {\n        setCards(array); //меняем стейт cards\n      })\n      .catch((err) => {\n        console.log(`Упс, произошла ошибка: ${err}`);\n      });\n  }, []);\n\n  return (\n    <>\n      <main className=\"content\">\n          <section className=\"profile\">\n            <div className=\"profile__cover\">\n              <div className=\"profile__information\">\n                <figure className=\"profile__background\" onClick={props.onEditAvatar}></figure> {/*при клике на аву меняем стейт на true и передем в компонент App*/}\n                <img className=\"profile__avatar\" src={userInterface.avatar} alt=\"Жак-Ив Кусто\"/>\n              </div>\n              <div className=\"profile__info\">\n                <div className=\"profile__reg\">\n                  <h1 className=\"profile__author\">{userInterface.name}</h1>\n                  <button className=\"profile__button-edit\" type=\"button\" onClick={props.onEditProfile}></button> {/*при клике на редактор инфы меняем стейт на true и передем в компонент App*/}\n                </div>\n                <p className=\"profile__specialty\">{userInterface.about}</p>\n              </div>\n            </div>\n            <button className=\"profile__button-add\" type=\"button\" onClick={props.onAddPlace}></button> {/*при клике на + меняем стейт на true и передем в компонент App*/}\n          </section>\n\n          <section className=\"elements\"> {/*передаем в Card информацию о каждой карточке, приcваиваем каждой карточке key и передаем ф-цию по смене флага при нажатии на картинку*/}\n            {cards.map((item, index) => {\n              return(\n                <Card card={item} key={index} onCardClick={props.onCardClick}/>\n              );\n            })}\n          </section>\n      </main>\n    </>\n  )\n}\n\nexport default Main\n","import React from 'react';\n\nfunction PopupWithForm(props) {\n\n  return (\n    <>\n      <section className={`popup popup__${props.name} ${props.isOpen && 'popup_opened'}`}>\n        <form className={`popup-container popup-container__${props.name}`} name=\"form\" method=\"POST\" action=\"#\" noValidate>\n          <h2 className=\"popup-container__text\">{props.title}</h2>\n          <fieldset className=\"popup-container__info\">\n            {props.children}\n            <button className=\"popup-container__button-add\" type=\"submit\">{props.buttonText}</button>\n          </fieldset>\n          <button className=\"popup-container__button-reset\" type=\"reset\" aria-label=\"Close\" onClick={props.onClose}></button>\n        </form>\n      </section>\n    </>\n  )\n}\n\nexport default PopupWithForm;\n","import React from 'react';\n\nfunction ImagePopup(props) {\n  return (\n    <>\n      <section className={`popup popup__show-image ${props.isOpen && 'popup_opened'}`}>\n        <figure className=\"popup-image\">\n          <img className=\"popup-image__picture\" src={props.card.link} alt=\"Изображение места\"/>\n          <figcaption className=\"popup-image__caption\">{props.card.name}</figcaption>\n          <button className=\"popup-container__button-reset popup-container__button-reset_image\" type=\"reset\" aria-label=\"Close\" onClick={props.onClose}></button>\n        </figure>\n      </section>\n    </>\n  )\n}\n\nexport default ImagePopup;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <>\n      <footer className=\"footer\">\n          <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\n      </footer>\n    </>\n  )\n}\n\nexport default Footer\n","import React from 'react';\nimport logo from '../images/mesto-logo.svg';\nimport Header from './Header';\nimport Main from './Main';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport Footer from './Footer';\n\nfunction App() {\n\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState(false);\n  const [showImage, setShowImage] = React.useState({});\n  //функция меняет хначения при клике на картинку и передает showImage данные об этой картинке (получает из компонента ImagePopup)\n  function handleCardClick(data) {\n    setSelectedCard(true);\n    setShowImage(data);\n  }\n  //попап сменить аватарку\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  };\n  //попап редактировать профиль\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  };\n  //попап загрузить новое место\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  };\n  //закрывает все попапы на крестик\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(false);\n  }\n\n  return (\n      <div className=\"page\">\n        <Header logo={logo} />\n        <Main\n          onEditProfile={handleEditProfileClick} //передает ф-цию по клике на редактирование профиля\n          onAddPlace={handleAddPlaceClick} // передает ф-цию по клике на кнопку добавления нового места\n          onEditAvatar={handleEditAvatarClick} //ф-ция по клику на смену аватара\n          onCardClick={handleCardClick} //ф-ция по клике на картинку\n        />\n        {/*в каждом компоненте PopupWithForm передаем пропс isOpen, который есть условие того что конкретное поле объекта true и если оно верно, передаем новый класс по открытию формы*/}\n        <PopupWithForm title=\"Редактировать профиль\" name=\"edit-form\" buttonText=\"Сохранить\" isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} children={\n            <>\n              <input className=\"popup-container__infoform popup-container__infoform_author\" id=\"author-input\" name=\"author\" defaultValue=\"имя\" type=\"text\"  placeholder=\"Автор\" minLength=\"2\" maxLength=\"40\" pattern=\"[A-Za-zА-ЯЁа-яё -]{1,}\" required/>\n              <span className = \"popup-container__input-error\" id=\"author-input-error\">Вы пропустили это поле.</span>\n              <input className=\"popup-container__infoform popup-container__infoform_aboutyourself\" id=\"job-input\" name=\"job\" defaultValue=\"деятельность\" type=\"text\"  placeholder=\"О себе\"  minLength=\"2\" maxLength=\"200\" required/>\n              <span className = \"popup-container__input-error\" id=\"job-input-error\">Вы пропустили это поле.</span>\n            </>\n          } />\n        <PopupWithForm title=\"Новое место\" name=\"add-place\" buttonText=\"Создать\" isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} children={\n            <>\n              <input className=\"popup-container__infoform popup-container__infoform_place-name\" id=\"place-input\" name=\"name\" type=\"text\" placeholder=\"Название\" minLength=\"1\" maxLength=\"30\"  required/>\n              <span className = \"popup-container__input-error\" id=\"place-input-error\">Вы пропустили это поле.</span>\n              <input className=\"popup-container__infoform popup-container__infoform_place-link\" id=\"link-input\" name=\"link\" type=\"url\" placeholder=\"Ссылка на картинку\" required/>\n              <span className = \"popup-container__input-error\" id=\"link-input-error\"></span>\n            </>\n          } />\n        <PopupWithForm title=\"Обновить аватар\" name=\"avatar\" buttonText=\"Сохранить\" isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} children={\n            <>\n              <input className=\"popup-container__infoform popup-container__infoform_avatar-link\" id=\"avatar-input\" name=\"avatar\" type=\"url\" placeholder=\"Введите ссылку\" required/>\n              <span className = \"popup-container__input-error\" id=\"avatar-input-error\"></span>\n            </>\n          } />\n        <PopupWithForm title=\"Вы уверены?\" name=\"verification\" buttonText=\"Да\" />\n          {/*в ImagePopup передаем объект о нажатой карточке (card), условие как в PopupWithForm и ф-цию по смене стейта по нажатию на крестик*/}\n        <ImagePopup card={showImage} isOpen={selectedCard} onClose={closeAllPopups}/>\n        <Footer />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mesto-logo.c6f11019.svg\";"],"sourceRoot":""}